/* 
 * PharmaTrace Supply Chain Information Network API
 *
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.io.pharmatrace.api.scin.public.api;
using Org.OpenAPITools.io.pharmatrace.api.scin.public.model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing Pharmaceutical
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class PharmaceuticalTests
    {
        // TODO uncomment below to declare an instance variable for Pharmaceutical
        //private Pharmaceutical instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Pharmaceutical
            //instance = new Pharmaceutical();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Pharmaceutical
        /// </summary>
        [Test]
        public void PharmaceuticalInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" Pharmaceutical
            //Assert.IsInstanceOfType<Pharmaceutical> (instance, "variable 'instance' is a Pharmaceutical");
        }


        /// <summary>
        /// Test the property 'PharmaceuticalId'
        /// </summary>
        [Test]
        public void PharmaceuticalIdTest()
        {
            // TODO unit test for the property 'PharmaceuticalId'
        }
        /// <summary>
        /// Test the property 'Gtin'
        /// </summary>
        [Test]
        public void GtinTest()
        {
            // TODO unit test for the property 'Gtin'
        }
        /// <summary>
        /// Test the property 'TradeName'
        /// </summary>
        [Test]
        public void TradeNameTest()
        {
            // TODO unit test for the property 'TradeName'
        }
        /// <summary>
        /// Test the property 'EanCode'
        /// </summary>
        [Test]
        public void EanCodeTest()
        {
            // TODO unit test for the property 'EanCode'
        }
        /// <summary>
        /// Test the property 'ManufacturerId'
        /// </summary>
        [Test]
        public void ManufacturerIdTest()
        {
            // TODO unit test for the property 'ManufacturerId'
        }
        /// <summary>
        /// Test the property 'Image'
        /// </summary>
        [Test]
        public void ImageTest()
        {
            // TODO unit test for the property 'Image'
        }

    }

}
