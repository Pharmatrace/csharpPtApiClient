/* 
 * PharmaTrace Supply Chain Information Network API
 *
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.io.pharmatrace.api.scin.public.api;
using Org.OpenAPITools.io.pharmatrace.api.scin.public.model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing LocationsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class LocationsApiTests
    {
        private LocationsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new LocationsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of LocationsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' LocationsApi
            //Assert.IsInstanceOfType(typeof(LocationsApi), instance, "instance is a LocationsApi");
        }

        
        /// <summary>
        /// Test AddLocation
        /// </summary>
        [Test]
        public void AddLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Location location = null;
            //var response = instance.AddLocation(location);
            //Assert.IsInstanceOf<Location> (response, "response is Location");
        }
        
        /// <summary>
        /// Test DeleteLocation
        /// </summary>
        [Test]
        public void DeleteLocationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteLocation(id);
            
        }
        
        /// <summary>
        /// Test FindLocationById
        /// </summary>
        [Test]
        public void FindLocationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.FindLocationById(id);
            //Assert.IsInstanceOf<Location> (response, "response is Location");
        }
        
        /// <summary>
        /// Test FindLocations
        /// </summary>
        [Test]
        public void FindLocationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> tags = null;
            //int? limit = null;
            //var response = instance.FindLocations(tags, limit);
            //Assert.IsInstanceOf<List<Location>> (response, "response is List<Location>");
        }
        
    }

}
