/* 
 * PharmaTrace Supply Chain Information Network API
 *
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.io.pharmatrace.api.scin.public.model
{
    /// <summary>
    /// Profile
    /// </summary>
    [DataContract]
    public partial class Profile :  IEquatable<Profile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Profile" /> class.
        /// </summary>
        /// <param name="firstName">First name of the PT network user..</param>
        /// <param name="lastName">Last name of the PT network user..</param>
        /// <param name="email">Email address.</param>
        /// <param name="twitterName">Twitter name.</param>
        /// <param name="linkedinName">LinkedIn name.</param>
        /// <param name="facebookName">Facebook name.</param>
        /// <param name="picture">Image URL.</param>
        /// <param name="stakeholderId">the PT network member that the user/profile is assigned to..</param>
        /// <param name="active">true if the user is currently active. Inactive users will be anonymized but not deleted to maintain integrity of transaction history.</param>
        public Profile(string firstName = default(string), string lastName = default(string), string email = default(string), string twitterName = default(string), string linkedinName = default(string), string facebookName = default(string), string picture = default(string), string stakeholderId = default(string), bool? active = default(bool?))
        {
            this.FirstName = firstName;
            this.LastName = lastName;
            this.Email = email;
            this.TwitterName = twitterName;
            this.LinkedinName = linkedinName;
            this.FacebookName = facebookName;
            this.Picture = picture;
            this.StakeholderId = stakeholderId;
            this.Active = active;
        }
        
        /// <summary>
        /// First name of the PT network user.
        /// </summary>
        /// <value>First name of the PT network user.</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Last name of the PT network user.
        /// </summary>
        /// <value>Last name of the PT network user.</value>
        [DataMember(Name="last_name", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Email address
        /// </summary>
        /// <value>Email address</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Twitter name
        /// </summary>
        /// <value>Twitter name</value>
        [DataMember(Name="twitter_name", EmitDefaultValue=false)]
        public string TwitterName { get; set; }

        /// <summary>
        /// LinkedIn name
        /// </summary>
        /// <value>LinkedIn name</value>
        [DataMember(Name="linkedin_name", EmitDefaultValue=false)]
        public string LinkedinName { get; set; }

        /// <summary>
        /// Facebook name
        /// </summary>
        /// <value>Facebook name</value>
        [DataMember(Name="facebook_name", EmitDefaultValue=false)]
        public string FacebookName { get; set; }

        /// <summary>
        /// Image URL
        /// </summary>
        /// <value>Image URL</value>
        [DataMember(Name="picture", EmitDefaultValue=false)]
        public string Picture { get; set; }

        /// <summary>
        /// the PT network member that the user/profile is assigned to.
        /// </summary>
        /// <value>the PT network member that the user/profile is assigned to.</value>
        [DataMember(Name="stakeholder_id", EmitDefaultValue=false)]
        public string StakeholderId { get; set; }

        /// <summary>
        /// true if the user is currently active. Inactive users will be anonymized but not deleted to maintain integrity of transaction history
        /// </summary>
        /// <value>true if the user is currently active. Inactive users will be anonymized but not deleted to maintain integrity of transaction history</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Profile {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TwitterName: ").Append(TwitterName).Append("\n");
            sb.Append("  LinkedinName: ").Append(LinkedinName).Append("\n");
            sb.Append("  FacebookName: ").Append(FacebookName).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  StakeholderId: ").Append(StakeholderId).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Profile);
        }

        /// <summary>
        /// Returns true if Profile instances are equal
        /// </summary>
        /// <param name="input">Instance of Profile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Profile input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.TwitterName == input.TwitterName ||
                    (this.TwitterName != null &&
                    this.TwitterName.Equals(input.TwitterName))
                ) && 
                (
                    this.LinkedinName == input.LinkedinName ||
                    (this.LinkedinName != null &&
                    this.LinkedinName.Equals(input.LinkedinName))
                ) && 
                (
                    this.FacebookName == input.FacebookName ||
                    (this.FacebookName != null &&
                    this.FacebookName.Equals(input.FacebookName))
                ) && 
                (
                    this.Picture == input.Picture ||
                    (this.Picture != null &&
                    this.Picture.Equals(input.Picture))
                ) && 
                (
                    this.StakeholderId == input.StakeholderId ||
                    (this.StakeholderId != null &&
                    this.StakeholderId.Equals(input.StakeholderId))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.TwitterName != null)
                    hashCode = hashCode * 59 + this.TwitterName.GetHashCode();
                if (this.LinkedinName != null)
                    hashCode = hashCode * 59 + this.LinkedinName.GetHashCode();
                if (this.FacebookName != null)
                    hashCode = hashCode * 59 + this.FacebookName.GetHashCode();
                if (this.Picture != null)
                    hashCode = hashCode * 59 + this.Picture.GetHashCode();
                if (this.StakeholderId != null)
                    hashCode = hashCode * 59 + this.StakeholderId.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
