/* 
 * PharmaTrace Supply Chain Information Network API
 *
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.io.pharmatrace.api.scin.public.model
{
    /// <summary>
    /// Transaction
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="timestamp">GMT, Unix Epoch.</param>
        /// <param name="txUid">unique id hash of the transaction.</param>
        /// <param name="termsId">id reference to the terms and conditions for this transaction.</param>
        /// <param name="transactionChannel">hyperledger channel the transaction has been executed in.</param>
        public Transaction(long? timestamp = default(long?), string txUid = default(string), string termsId = default(string), string transactionChannel = default(string))
        {
            this.Timestamp = timestamp;
            this.TxUid = txUid;
            this.TermsId = termsId;
            this.TransactionChannel = transactionChannel;
        }
        
        /// <summary>
        /// GMT, Unix Epoch
        /// </summary>
        /// <value>GMT, Unix Epoch</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// unique id hash of the transaction
        /// </summary>
        /// <value>unique id hash of the transaction</value>
        [DataMember(Name="tx_uid", EmitDefaultValue=false)]
        public string TxUid { get; set; }

        /// <summary>
        /// id reference to the terms and conditions for this transaction
        /// </summary>
        /// <value>id reference to the terms and conditions for this transaction</value>
        [DataMember(Name="terms_id", EmitDefaultValue=false)]
        public string TermsId { get; set; }

        /// <summary>
        /// hyperledger channel the transaction has been executed in
        /// </summary>
        /// <value>hyperledger channel the transaction has been executed in</value>
        [DataMember(Name="transaction_channel", EmitDefaultValue=false)]
        public string TransactionChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TxUid: ").Append(TxUid).Append("\n");
            sb.Append("  TermsId: ").Append(TermsId).Append("\n");
            sb.Append("  TransactionChannel: ").Append(TransactionChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.TxUid == input.TxUid ||
                    (this.TxUid != null &&
                    this.TxUid.Equals(input.TxUid))
                ) && 
                (
                    this.TermsId == input.TermsId ||
                    (this.TermsId != null &&
                    this.TermsId.Equals(input.TermsId))
                ) && 
                (
                    this.TransactionChannel == input.TransactionChannel ||
                    (this.TransactionChannel != null &&
                    this.TransactionChannel.Equals(input.TransactionChannel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.TxUid != null)
                    hashCode = hashCode * 59 + this.TxUid.GetHashCode();
                if (this.TermsId != null)
                    hashCode = hashCode * 59 + this.TermsId.GetHashCode();
                if (this.TransactionChannel != null)
                    hashCode = hashCode * 59 + this.TransactionChannel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
