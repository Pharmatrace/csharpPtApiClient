/* 
 * PharmaTrace Supply Chain Information Network API
 *
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.io.pharmatrace.api.scin.public.model
{
    /// <summary>
    /// LegalTxTerms
    /// </summary>
    [DataContract]
    public partial class LegalTxTerms :  IEquatable<LegalTxTerms>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalTxTerms" /> class.
        /// </summary>
        /// <param name="timestampValidFrom">GMT, Unix Epoch.</param>
        /// <param name="timestampValidUntil">GMT, Unix Epoch.</param>
        /// <param name="validityTolerance">tolerance window for transactions that begin but do not finish under the governance of these terms (in ms).</param>
        /// <param name="termsId">unique id hash of the transaction terms and conditions.</param>
        /// <param name="termsVersion">optional version mark of the terms.</param>
        /// <param name="termsIdPreviousVersion">optional link to the previous version of these terms.</param>
        /// <param name="termsText">text of the terms and conditions.</param>
        /// <param name="language">ISO language code, e.g. en_us.</param>
        /// <param name="legislation">legislation enforcing these terms.</param>
        public LegalTxTerms(long? timestampValidFrom = default(long?), long? timestampValidUntil = default(long?), long? validityTolerance = default(long?), string termsId = default(string), string termsVersion = default(string), string termsIdPreviousVersion = default(string), string termsText = default(string), string language = default(string), string legislation = default(string))
        {
            this.TimestampValidFrom = timestampValidFrom;
            this.TimestampValidUntil = timestampValidUntil;
            this.ValidityTolerance = validityTolerance;
            this.TermsId = termsId;
            this.TermsVersion = termsVersion;
            this.TermsIdPreviousVersion = termsIdPreviousVersion;
            this.TermsText = termsText;
            this.Language = language;
            this.Legislation = legislation;
        }
        
        /// <summary>
        /// GMT, Unix Epoch
        /// </summary>
        /// <value>GMT, Unix Epoch</value>
        [DataMember(Name="timestamp_valid_from", EmitDefaultValue=false)]
        public long? TimestampValidFrom { get; set; }

        /// <summary>
        /// GMT, Unix Epoch
        /// </summary>
        /// <value>GMT, Unix Epoch</value>
        [DataMember(Name="timestamp_valid_until", EmitDefaultValue=false)]
        public long? TimestampValidUntil { get; set; }

        /// <summary>
        /// tolerance window for transactions that begin but do not finish under the governance of these terms (in ms)
        /// </summary>
        /// <value>tolerance window for transactions that begin but do not finish under the governance of these terms (in ms)</value>
        [DataMember(Name="validity_tolerance", EmitDefaultValue=false)]
        public long? ValidityTolerance { get; set; }

        /// <summary>
        /// unique id hash of the transaction terms and conditions
        /// </summary>
        /// <value>unique id hash of the transaction terms and conditions</value>
        [DataMember(Name="terms_id", EmitDefaultValue=false)]
        public string TermsId { get; set; }

        /// <summary>
        /// optional version mark of the terms
        /// </summary>
        /// <value>optional version mark of the terms</value>
        [DataMember(Name="terms_version", EmitDefaultValue=false)]
        public string TermsVersion { get; set; }

        /// <summary>
        /// optional link to the previous version of these terms
        /// </summary>
        /// <value>optional link to the previous version of these terms</value>
        [DataMember(Name="terms_id_previous_version", EmitDefaultValue=false)]
        public string TermsIdPreviousVersion { get; set; }

        /// <summary>
        /// text of the terms and conditions
        /// </summary>
        /// <value>text of the terms and conditions</value>
        [DataMember(Name="terms_text", EmitDefaultValue=false)]
        public string TermsText { get; set; }

        /// <summary>
        /// ISO language code, e.g. en_us
        /// </summary>
        /// <value>ISO language code, e.g. en_us</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// legislation enforcing these terms
        /// </summary>
        /// <value>legislation enforcing these terms</value>
        [DataMember(Name="legislation", EmitDefaultValue=false)]
        public string Legislation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalTxTerms {\n");
            sb.Append("  TimestampValidFrom: ").Append(TimestampValidFrom).Append("\n");
            sb.Append("  TimestampValidUntil: ").Append(TimestampValidUntil).Append("\n");
            sb.Append("  ValidityTolerance: ").Append(ValidityTolerance).Append("\n");
            sb.Append("  TermsId: ").Append(TermsId).Append("\n");
            sb.Append("  TermsVersion: ").Append(TermsVersion).Append("\n");
            sb.Append("  TermsIdPreviousVersion: ").Append(TermsIdPreviousVersion).Append("\n");
            sb.Append("  TermsText: ").Append(TermsText).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Legislation: ").Append(Legislation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegalTxTerms);
        }

        /// <summary>
        /// Returns true if LegalTxTerms instances are equal
        /// </summary>
        /// <param name="input">Instance of LegalTxTerms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalTxTerms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TimestampValidFrom == input.TimestampValidFrom ||
                    (this.TimestampValidFrom != null &&
                    this.TimestampValidFrom.Equals(input.TimestampValidFrom))
                ) && 
                (
                    this.TimestampValidUntil == input.TimestampValidUntil ||
                    (this.TimestampValidUntil != null &&
                    this.TimestampValidUntil.Equals(input.TimestampValidUntil))
                ) && 
                (
                    this.ValidityTolerance == input.ValidityTolerance ||
                    (this.ValidityTolerance != null &&
                    this.ValidityTolerance.Equals(input.ValidityTolerance))
                ) && 
                (
                    this.TermsId == input.TermsId ||
                    (this.TermsId != null &&
                    this.TermsId.Equals(input.TermsId))
                ) && 
                (
                    this.TermsVersion == input.TermsVersion ||
                    (this.TermsVersion != null &&
                    this.TermsVersion.Equals(input.TermsVersion))
                ) && 
                (
                    this.TermsIdPreviousVersion == input.TermsIdPreviousVersion ||
                    (this.TermsIdPreviousVersion != null &&
                    this.TermsIdPreviousVersion.Equals(input.TermsIdPreviousVersion))
                ) && 
                (
                    this.TermsText == input.TermsText ||
                    (this.TermsText != null &&
                    this.TermsText.Equals(input.TermsText))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Legislation == input.Legislation ||
                    (this.Legislation != null &&
                    this.Legislation.Equals(input.Legislation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TimestampValidFrom != null)
                    hashCode = hashCode * 59 + this.TimestampValidFrom.GetHashCode();
                if (this.TimestampValidUntil != null)
                    hashCode = hashCode * 59 + this.TimestampValidUntil.GetHashCode();
                if (this.ValidityTolerance != null)
                    hashCode = hashCode * 59 + this.ValidityTolerance.GetHashCode();
                if (this.TermsId != null)
                    hashCode = hashCode * 59 + this.TermsId.GetHashCode();
                if (this.TermsVersion != null)
                    hashCode = hashCode * 59 + this.TermsVersion.GetHashCode();
                if (this.TermsIdPreviousVersion != null)
                    hashCode = hashCode * 59 + this.TermsIdPreviousVersion.GetHashCode();
                if (this.TermsText != null)
                    hashCode = hashCode * 59 + this.TermsText.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Legislation != null)
                    hashCode = hashCode * 59 + this.Legislation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
