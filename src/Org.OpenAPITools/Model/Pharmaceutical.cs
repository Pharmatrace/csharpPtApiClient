/* 
 * PharmaTrace Supply Chain Information Network API
 *
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Pharmaceutical
    /// </summary>
    [DataContract]
    public partial class Pharmaceutical :  IEquatable<Pharmaceutical>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pharmaceutical" /> class.
        /// </summary>
        /// <param name="pharmaceuticalId">Either gtin or synthetical for precision medicine..</param>
        /// <param name="gtin">Global trade item number (GS1).</param>
        /// <param name="tradeName">Manufacturers official name of the pharmaceutical product..</param>
        /// <param name="eanCode">EAN code..</param>
        /// <param name="manufacturerId">Manufaturer id.</param>
        /// <param name="image">Image URL representing the product..</param>
        public Pharmaceutical(string pharmaceuticalId = default(string), string gtin = default(string), string tradeName = default(string), string eanCode = default(string), string manufacturerId = default(string), string image = default(string))
        {
            this.PharmaceuticalId = pharmaceuticalId;
            this.Gtin = gtin;
            this.TradeName = tradeName;
            this.EanCode = eanCode;
            this.ManufacturerId = manufacturerId;
            this.Image = image;
        }
        
        /// <summary>
        /// Either gtin or synthetical for precision medicine.
        /// </summary>
        /// <value>Either gtin or synthetical for precision medicine.</value>
        [DataMember(Name="pharmaceutical_id", EmitDefaultValue=false)]
        public string PharmaceuticalId { get; set; }

        /// <summary>
        /// Global trade item number (GS1)
        /// </summary>
        /// <value>Global trade item number (GS1)</value>
        [DataMember(Name="gtin", EmitDefaultValue=false)]
        public string Gtin { get; set; }

        /// <summary>
        /// Manufacturers official name of the pharmaceutical product.
        /// </summary>
        /// <value>Manufacturers official name of the pharmaceutical product.</value>
        [DataMember(Name="trade_name", EmitDefaultValue=false)]
        public string TradeName { get; set; }

        /// <summary>
        /// EAN code.
        /// </summary>
        /// <value>EAN code.</value>
        [DataMember(Name="ean_code", EmitDefaultValue=false)]
        public string EanCode { get; set; }

        /// <summary>
        /// Manufaturer id
        /// </summary>
        /// <value>Manufaturer id</value>
        [DataMember(Name="manufacturer_id", EmitDefaultValue=false)]
        public string ManufacturerId { get; set; }

        /// <summary>
        /// Image URL representing the product.
        /// </summary>
        /// <value>Image URL representing the product.</value>
        [DataMember(Name="image", EmitDefaultValue=false)]
        public string Image { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pharmaceutical {\n");
            sb.Append("  PharmaceuticalId: ").Append(PharmaceuticalId).Append("\n");
            sb.Append("  Gtin: ").Append(Gtin).Append("\n");
            sb.Append("  TradeName: ").Append(TradeName).Append("\n");
            sb.Append("  EanCode: ").Append(EanCode).Append("\n");
            sb.Append("  ManufacturerId: ").Append(ManufacturerId).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pharmaceutical);
        }

        /// <summary>
        /// Returns true if Pharmaceutical instances are equal
        /// </summary>
        /// <param name="input">Instance of Pharmaceutical to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pharmaceutical input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PharmaceuticalId == input.PharmaceuticalId ||
                    (this.PharmaceuticalId != null &&
                    this.PharmaceuticalId.Equals(input.PharmaceuticalId))
                ) && 
                (
                    this.Gtin == input.Gtin ||
                    (this.Gtin != null &&
                    this.Gtin.Equals(input.Gtin))
                ) && 
                (
                    this.TradeName == input.TradeName ||
                    (this.TradeName != null &&
                    this.TradeName.Equals(input.TradeName))
                ) && 
                (
                    this.EanCode == input.EanCode ||
                    (this.EanCode != null &&
                    this.EanCode.Equals(input.EanCode))
                ) && 
                (
                    this.ManufacturerId == input.ManufacturerId ||
                    (this.ManufacturerId != null &&
                    this.ManufacturerId.Equals(input.ManufacturerId))
                ) && 
                (
                    this.Image == input.Image ||
                    (this.Image != null &&
                    this.Image.Equals(input.Image))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PharmaceuticalId != null)
                    hashCode = hashCode * 59 + this.PharmaceuticalId.GetHashCode();
                if (this.Gtin != null)
                    hashCode = hashCode * 59 + this.Gtin.GetHashCode();
                if (this.TradeName != null)
                    hashCode = hashCode * 59 + this.TradeName.GetHashCode();
                if (this.EanCode != null)
                    hashCode = hashCode * 59 + this.EanCode.GetHashCode();
                if (this.ManufacturerId != null)
                    hashCode = hashCode * 59 + this.ManufacturerId.GetHashCode();
                if (this.Image != null)
                    hashCode = hashCode * 59 + this.Image.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
