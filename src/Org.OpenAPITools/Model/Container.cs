/* 
 * PharmaTrace Supply Chain Information Network API
 *
 * The PharmaTrace SCIN API provides network members a resource and process oriented access to the blockchain backed market and inventory information. It represents a layer of abstraction above the Hyperledger network to facilitate a business focused development of clients and integration systems without the need to directly connect to Hyperledger nodes.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: api@pharmatrace.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Container
    /// </summary>
    [DataContract]
    public partial class Container :  IEquatable<Container>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Container" /> class.
        /// </summary>
        /// <param name="containerId">Unique identifier representing a specific container..</param>
        /// <param name="epcCode">EPC code.</param>
        /// <param name="label">Serialization label..</param>
        /// <param name="barcode">barcode on container. Normally equal to container id..</param>
        /// <param name="rfId">RFID of RF tracking label on conatiner..</param>
        /// <param name="quantity">quantity of product in container..</param>
        /// <param name="unit">Unit for quantity measurement..</param>
        /// <param name="currentLocationId">Location id of last tracked locaction..</param>
        /// <param name="ownerStakeholderId">stakeholder id of the last tracked owner of the container..</param>
        /// <param name="parentContainerId">id of the parent container or null..</param>
        public Container(string containerId = default(string), string epcCode = default(string), string label = default(string), string barcode = default(string), string rfId = default(string), decimal? quantity = default(decimal?), string unit = default(string), string currentLocationId = default(string), string ownerStakeholderId = default(string), string parentContainerId = default(string))
        {
            this.ContainerId = containerId;
            this.EpcCode = epcCode;
            this.Label = label;
            this.Barcode = barcode;
            this.RfId = rfId;
            this.Quantity = quantity;
            this.Unit = unit;
            this.CurrentLocationId = currentLocationId;
            this.OwnerStakeholderId = ownerStakeholderId;
            this.ParentContainerId = parentContainerId;
        }
        
        /// <summary>
        /// Unique identifier representing a specific container.
        /// </summary>
        /// <value>Unique identifier representing a specific container.</value>
        [DataMember(Name="container_id", EmitDefaultValue=false)]
        public string ContainerId { get; set; }

        /// <summary>
        /// EPC code
        /// </summary>
        /// <value>EPC code</value>
        [DataMember(Name="epc_code", EmitDefaultValue=false)]
        public string EpcCode { get; set; }

        /// <summary>
        /// Serialization label.
        /// </summary>
        /// <value>Serialization label.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// barcode on container. Normally equal to container id.
        /// </summary>
        /// <value>barcode on container. Normally equal to container id.</value>
        [DataMember(Name="barcode", EmitDefaultValue=false)]
        public string Barcode { get; set; }

        /// <summary>
        /// RFID of RF tracking label on conatiner.
        /// </summary>
        /// <value>RFID of RF tracking label on conatiner.</value>
        [DataMember(Name="rf_id", EmitDefaultValue=false)]
        public string RfId { get; set; }

        /// <summary>
        /// quantity of product in container.
        /// </summary>
        /// <value>quantity of product in container.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public decimal? Quantity { get; set; }

        /// <summary>
        /// Unit for quantity measurement.
        /// </summary>
        /// <value>Unit for quantity measurement.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }

        /// <summary>
        /// Location id of last tracked locaction.
        /// </summary>
        /// <value>Location id of last tracked locaction.</value>
        [DataMember(Name="current_location_id", EmitDefaultValue=false)]
        public string CurrentLocationId { get; set; }

        /// <summary>
        /// stakeholder id of the last tracked owner of the container.
        /// </summary>
        /// <value>stakeholder id of the last tracked owner of the container.</value>
        [DataMember(Name="owner_stakeholder_id", EmitDefaultValue=false)]
        public string OwnerStakeholderId { get; set; }

        /// <summary>
        /// id of the parent container or null.
        /// </summary>
        /// <value>id of the parent container or null.</value>
        [DataMember(Name="parent_container_id", EmitDefaultValue=false)]
        public string ParentContainerId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Container {\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("  EpcCode: ").Append(EpcCode).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Barcode: ").Append(Barcode).Append("\n");
            sb.Append("  RfId: ").Append(RfId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  CurrentLocationId: ").Append(CurrentLocationId).Append("\n");
            sb.Append("  OwnerStakeholderId: ").Append(OwnerStakeholderId).Append("\n");
            sb.Append("  ParentContainerId: ").Append(ParentContainerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Container);
        }

        /// <summary>
        /// Returns true if Container instances are equal
        /// </summary>
        /// <param name="input">Instance of Container to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Container input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContainerId == input.ContainerId ||
                    (this.ContainerId != null &&
                    this.ContainerId.Equals(input.ContainerId))
                ) && 
                (
                    this.EpcCode == input.EpcCode ||
                    (this.EpcCode != null &&
                    this.EpcCode.Equals(input.EpcCode))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Barcode == input.Barcode ||
                    (this.Barcode != null &&
                    this.Barcode.Equals(input.Barcode))
                ) && 
                (
                    this.RfId == input.RfId ||
                    (this.RfId != null &&
                    this.RfId.Equals(input.RfId))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.CurrentLocationId == input.CurrentLocationId ||
                    (this.CurrentLocationId != null &&
                    this.CurrentLocationId.Equals(input.CurrentLocationId))
                ) && 
                (
                    this.OwnerStakeholderId == input.OwnerStakeholderId ||
                    (this.OwnerStakeholderId != null &&
                    this.OwnerStakeholderId.Equals(input.OwnerStakeholderId))
                ) && 
                (
                    this.ParentContainerId == input.ParentContainerId ||
                    (this.ParentContainerId != null &&
                    this.ParentContainerId.Equals(input.ParentContainerId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContainerId != null)
                    hashCode = hashCode * 59 + this.ContainerId.GetHashCode();
                if (this.EpcCode != null)
                    hashCode = hashCode * 59 + this.EpcCode.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Barcode != null)
                    hashCode = hashCode * 59 + this.Barcode.GetHashCode();
                if (this.RfId != null)
                    hashCode = hashCode * 59 + this.RfId.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.CurrentLocationId != null)
                    hashCode = hashCode * 59 + this.CurrentLocationId.GetHashCode();
                if (this.OwnerStakeholderId != null)
                    hashCode = hashCode * 59 + this.OwnerStakeholderId.GetHashCode();
                if (this.ParentContainerId != null)
                    hashCode = hashCode * 59 + this.ParentContainerId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
